package com.dls.base.controller;

import com.dls.base.entity.Person;
import com.dls.base.entity.Role;
import com.dls.base.repository.PersonRepository;
import com.dls.base.repository.RoleRepository;
import com.dls.base.request.RemoveContainer;
import com.dls.base.ui.form.FormAttribute;
import com.dls.base.ui.form.FormTemplate;
import com.dls.base.utils.Utils;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.data.repository.query.ReturnedType;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.web.bind.annotation.*;

import javax.swing.text.html.HTML;
import java.io.*;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.*;

@RestController
@RequestMapping("form")
public class FormRestController
{

	private final PersonRepository personRepository;


	@Autowired
	private ResourceLoader resourceLoader;

	@Autowired
	Utils utils;

	@Autowired
	FormRestController(PersonRepository personRepository, RoleRepository roleRepository) {
		this.personRepository = personRepository;
	}

	@GetMapping(value = "/currentUser", produces = MediaType.APPLICATION_JSON_VALUE + ";charset=UTF-8")
	public FormTemplate getFormByCurrentUsername() {
		FormTemplate formTemplate = null;
		String template = "person";
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		formTemplate = getFormByIdentifier(template, authentication.getName());
		return formTemplate;
	}

	@GetMapping(value = "/{template}/{identifier}", produces = MediaType.APPLICATION_JSON_VALUE + ";charset=UTF-8")
	public FormTemplate getFormByIdentifier(@PathVariable String template, @PathVariable String identifier) {
		FormTemplate formTemplate = null;
		switch (template){
			case "person" :
				Person person;
				if (utils.isNumeric(identifier)){
					Long id = Long.parseLong(identifier);
					if (id == 0){
						person = new Person();
					}else{
						person = personRepository.findByPersonId(id);
					}
				}else{
					String username = identifier;
					person = personRepository.findByUsername(username);
				}
				formTemplate = getFormByEntity(template, person);
				break;
				default:
					break;
		}
		return formTemplate;
	}

	public FormTemplate getFormByEntity(String template, Object entity) {
		FormTemplate formTemplate = null;
		switch (template){
			case "person" :
				Person person = (Person)entity;
				HashMap<String, String> skipList = new HashMap<String, String>();
				skipList.put("password", "");
				skipList.put("confirmpassword", "");
				try {
					XmlMapper xmlMapper = new XmlMapper();
					final Resource fileResource = resourceLoader.getResource("/WEB-INF/form_config/" + template + ".xml");
					File file = fileResource.getFile();
					String xml = utils.inputStreamToString(new FileInputStream(file));
					formTemplate = xmlMapper.readValue(xml, FormTemplate.class);
					formTemplate.attributes = new HashMap<String, FormAttribute>();
					formTemplate.tabTitle = (person.getSurname() + " " + person.getName() + " " + person.getMiddlename());
					formTemplate.template = person.getClass().getSimpleName().toLowerCase();
					List<Field> fields = utils.getFields(person);
					for (Field field : fields){
						if (!skipList.containsKey(field.getName().toLowerCase())){
							field.setAccessible(true);
							try {
								FormAttribute formAttribute = new FormAttribute();
								formAttribute.name = field.getName();
								formAttribute.type = field.getType().getSimpleName().toLowerCase();
								formAttribute.value = field.get(person);
								if (formTemplate.attributeTitles.containsKey(field.getName())){
									formAttribute.title = formTemplate.attributeTitles.get(field.getName());
								}else{
									formAttribute.title = field.getName();
								}
								formTemplate.attributes.put(field.getName(), formAttribute);
							} catch (IllegalAccessException e) {
								e.printStackTrace();
							}
						}
					}
				} catch (IOException e) {
					e.printStackTrace();
				}
				break;
			default:
				break;
		}
		return formTemplate;
	}

	@PutMapping(value = "/{template}/{id}", produces = MediaType.APPLICATION_JSON_VALUE + ";charset=UTF-8")
	public FormTemplate createForm(@PathVariable String template, @PathVariable long id, @RequestBody Person person) {
		Person newPerson = new Person();
		newPerson.setUsername(person.getUsername());
		newPerson.setEmail(person.getEmail());
		newPerson.setSurname(person.getSurname());
		newPerson.setName(person.getName());
		newPerson.setMiddlename(person.getMiddlename());
		newPerson.setPassword(new BCryptPasswordEncoder().encode(utils.getAppProperty("default.user.password")));
		newPerson.setRoles(person.getRoles());
		Person savedPerson = personRepository.save(newPerson);
		return getFormByIdentifier(template, savedPerson.getId().toString());
	}

	@PostMapping(value = "/{template}/{id}", produces = MediaType.APPLICATION_JSON_VALUE + ";charset=UTF-8")
	public @ResponseBody FormTemplate updateForm(@PathVariable String template, @PathVariable long id, @RequestBody Person person) {
		Person updatePerson = personRepository.findByPersonId(id);
		//updatePerson.setUsername(person.getUsername());
		updatePerson.setEmail(person.getEmail());
		updatePerson.setSurname(person.getSurname());
		updatePerson.setName(person.getName());
		updatePerson.setMiddlename(person.getMiddlename());
		updatePerson.setRoles(person.getRoles());
		Person savedPerson = personRepository.save(updatePerson);
		return getFormByIdentifier(template, savedPerson.getId().toString());
	}

	@PostMapping(value = "/remove", produces = MediaType.APPLICATION_JSON_VALUE + ";charset=UTF-8")
	public ResponseEntity removeFormList(@RequestBody final List<RemoveContainer> entities) {
		for (int i = 0; i < entities.size(); i++){
			RemoveContainer removeContainer = entities.get(i);
			switch (removeContainer.template){
				case "person" :
					Person person = personRepository.findByPersonId(removeContainer.id);
					if (person != null){
						personRepository.deleteById(removeContainer.id);
					}
					break;
				default:
					break;
			}
		}
		return ResponseEntity
				.status(HttpStatus.OK)
				.body("OK");
	}

	@DeleteMapping(value = "/{template}/{id}", produces = MediaType.APPLICATION_JSON_VALUE + ";charset=UTF-8")
	public ResponseEntity removeForm(@PathVariable String template, @PathVariable long id) {
		boolean res = false;
		switch (template){
			case "person" :
				Person person = personRepository.findByPersonId(id);
				if (person != null){
					personRepository.deleteById(id);
					res = true;
				}
				break;
			default:
				break;
		}
		if (res){
			return ResponseEntity
					.status(HttpStatus.OK)
					.body("OK");
		}else{
			return ResponseEntity
					.status(HttpStatus.NOT_FOUND)
					.body("Не найден");
		}
	}

}