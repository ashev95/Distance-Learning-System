package com.dls.base.controller;

import com.dls.base.entity.Person;
import com.dls.base.repository.PersonRepository;
import com.dls.base.ui.form.FormAttribute;
import com.dls.base.ui.form.FormTemplate;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.io.*;
import java.lang.reflect.Field;
import java.util.*;

@RestController
@RequestMapping("form")
public class FormRestController
{

	private final PersonRepository personRepository;

	@Autowired
	private ResourceLoader resourceLoader;

	@Autowired
	FormRestController(PersonRepository personRepository) {
		this.personRepository = personRepository;
	}

	@GetMapping(value = "/{template}/{id}", produces = MediaType.APPLICATION_JSON_VALUE + ";charset=UTF-8")
	public FormTemplate getForm(@PathVariable String template, @PathVariable long id) {

		FormTemplate formTemplate = null;

		Person person = personRepository.findByPersonId(id);

		HashMap<String, String> skipList = new HashMap<String, String>();
		skipList.put("password", "");
		skipList.put("confirmpassword", "");
		try {
			XmlMapper xmlMapper = new XmlMapper();
			final Resource fileResource = resourceLoader.getResource("/WEB-INF/form_config/" + template + ".xml");
			File file = fileResource.getFile();
			String xml = inputStreamToString(new FileInputStream(file));
			formTemplate = xmlMapper.readValue(xml, FormTemplate.class);
			formTemplate.attributes = new HashMap<String, FormAttribute>();
			List<Field> fields = getFields(person);
			int position = 0;
			for (Field field : fields){
				if (!skipList.containsKey(field.getName().toLowerCase())){
					field.setAccessible(true);
					try {
						FormAttribute formAttribute = new FormAttribute();
						formAttribute.name = field.getName();
						formAttribute.type = field.getType().getSimpleName().toLowerCase();
						formAttribute.value = field.get(person);
						formAttribute.position = ++position;
						formTemplate.attributes.put(field.getName(), formAttribute);
					} catch (IllegalAccessException e) {
						e.printStackTrace();
					}
				}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}

		return formTemplate;
	}

	private <T> List<Field> getFields(T t) {
		List<Field> fields = new ArrayList<>();
		Class clazz = t.getClass();
		while (clazz != Object.class) {
			fields.addAll(Arrays.asList(clazz.getDeclaredFields()));
			clazz = clazz.getSuperclass();
		}
		return fields;
	}

	public static String inputStreamToString(InputStream is) throws IOException {
		StringBuilder sb = new StringBuilder();
		String line;
		BufferedReader br = new BufferedReader(new InputStreamReader(is, "UTF8"));
		while ((line = br.readLine()) != null) {
			sb.append(line);
		}
		br.close();
		return sb.toString();
	}

}