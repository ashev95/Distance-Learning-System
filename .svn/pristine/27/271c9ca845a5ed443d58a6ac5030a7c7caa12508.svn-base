define([
    "dojo/_base/declare",
    "dijit/_WidgetBase",
    "dijit/_TemplatedMixin",
	"dijit/_WidgetsInTemplateMixin",
	"dojo/parser",
	"dojo/ready",

	"dojo/data/ItemFileReadStore",
	"dijit/tree/ForestStoreModel",
	"dijit/Tree",

	"dojo/request",

	"widgets/FormWidget",
	"widgets/GridWidget",
	"dojo/query",
	"dojo/dom-class",
    "dijit/ConfirmDialog",
    "dijit/Dialog",
    "dojo/store/JsonRest",

    "dijit/layout/ContentPane",

    "dijit/form/Button",

    "dojo/on",

    "dojo/request/xhr",

    "dijit/form/TextBox",

    "dijit/layout/BorderContainer",

    "dijit/layout/ContentPane",

    "dijit/layout/AccordionContainer",

    "dijit/layout/TabContainer",

    "dojo/dom",

    "dojo/cookie",

    "dojo/_base/json",

    "dojo/text!./config/view_config.json",
    "dojo/text!./config/form_config.json",

    "dojo/text!./template/AppWidget.html"
	
], function(declare, _WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin, parser, ready, ItemFileReadStore, ForestStoreModel, Tree, request, FormWidget, GridWidget,
            query, domClass, ConfirmDialog, Dialog, JsonRest, ContentPane, Button, on, xhr, TextBox, BorderContainer, ContentPane, AccordionContainer, TabContainer,
            dom, cookie, json, viewConfigText, formConfigText, template
){
    declare("AppWidget", [_WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin], {
		
		templateString: template,
		_newTabId: 0,
		tabContainer: undefined,
        logout: "",
        username: "",
        extraContainer: undefined,
        viewConfig: json.fromJson(viewConfigText),
        formConfig: json.fromJson(formConfigText),

        _getNewTabId: function (){
            return (this._newTabId++);
        },

		_getTabById: function (array, value) {
			var foundEntry;
			array.some(function(entry) {
				if (entry.id == value) {
				   foundEntry = entry;
				   return true;
				}
			});
			return foundEntry;
		},

		openTabGrid: function (item) {
			var appWidget = this;
			var newTabId = 'view_' + item.type + '_' + item.uid;
			var tab = this._getTabById(this.tabContainer.getChildren(), newTabId);
            var url = 'view/' + item.uid;
			if (!tab){
				request(url, {
					handleAs: "json"
				}).then(function(response){
					tab = new GridWidget({
						id: newTabId,
						title: item.name[0],
						url: url,
						closable: true,
						response: response,
						isNew: false,
						appWidget: appWidget
					});

					/* Для вкладки с гридом добавим класс со стилем */
					/* НАЧАЛО */
					appWidget.tabContainer.addChild(tab);
					var t = query(".dijitTabInner.dijitTabContent.dijitTab", appWidget.tabContainer.domNode);
					t.some(function(entry) {
						var tt = query("#" + newTabId, entry.domNode);
						if (tt[0]){
							domClass.add(entry, "myDijitTab");
						}
					});
					/* КОНЕЦ */
					appWidget.tabContainer.selectChild(tab);
				});
			}else{
				this.tabContainer.selectChild(tab);
			}
		},

		openTabForm: function (isNew, item){
            if (item.id && item.id[0]){
                if(item.id[0].toString().indexOf('_')){
                    item.id[0] = item.id[0].toString().split('_').pop();
                }
            }
            if (item.parent && item.parent.id && item.parent.id[0]){
                if(item.parent.id[0].toString().indexOf('_')){
                    item.parent.id[0] = item.parent.id[0].toString().split('_').pop();
                }
            }
            var newTabId = '';
            var tab = undefined;
            var thisContext = this;
            if (isNew){
                request(('form/' + item.type[0] + '/' + '0'), {
                    method: "get",
                    handleAs: "json"
                }).then(function(response){
                    var newTabId = 'new_form_' + item.type[0] + '_' + thisContext._getNewTabId();
                    tab = new FormWidget({
                        id: newTabId,
                        title: item.name[0],
                        closable: true,
                        response: response,
                        isNew: isNew,
                        template:item.type[0],
                        editMode: (!!item.editMode),
                        appWidget: thisContext
                    });
                    thisContext.tabContainer.addChild(tab);
                    thisContext.tabContainer.selectChild(tab);
                }, function (err){
                    thisContext.getPromptDialog(null, ("Ошибка при создании карточки: " + (err.message || ""))).show();
                });
			}else{
				newTabId = 'form_' + item.type[0] + '_' + item.id[0];
                if (item.reopen){
                    tab = this._getTabById(this.tabContainer.getChildren(), item.tabId);
                }else{
                    tab = this._getTabById(this.tabContainer.getChildren(), newTabId);
                }
				if (!tab || item.editMode || item.reopen){
                    new JsonRest({
                        target: 'form/' + item.type[0]
                    }).get(item.id[0]).then(function(response){
                        if (tab){
                            var index = thisContext.tabContainer.getIndexOfChild(tab);
                            thisContext.closeTab(tab);
                            tab = new FormWidget({
                                id: newTabId,
                                title: item.name[0],
                                closable: true,
                                response: response,
                                isNew: false,
                                template:item.type[0],
                                editMode: (!!item.editMode),
                                appWidget: thisContext
                            });
                            thisContext.tabContainer.addChild(tab, index);
                            thisContext.tabContainer.selectChild(tab);
                        }else{
                            tab = new FormWidget({
                                id: newTabId,
                                title: item.name[0],
                                closable: true,
                                response: response,
                                isNew: false,
                                template: item.type[0],
                                editMode: (!!item.editMode),
                                appWidget: thisContext
                            });
                            thisContext.tabContainer.addChild(tab);
                            thisContext.tabContainer.selectChild(tab);
                        }
                    }, function (err){
                        thisContext.getPromptDialog().show(null, "Ошибка при открытии карточки: " + (err.message || ""));
                    });
				}else{
					this.tabContainer.selectChild(tab);
				}
			}
		},

        refreshGrids: function (){
            this.tabContainer.getChildren().some(function(entry) {
                if (entry.baseClass == "GridWidget"){
                    entry.gridView.customRefresh()
                }
            });
        },

		_buildSidebarTree: function(type){
			return (new Tree({
				model:new ForestStoreModel({
                    store: new ItemFileReadStore({url: 'view/sidebar/' + type}),
					childrenAttrs: ["children"]
				}),
				showRoot:false,
				openOnClick:true,
				onClick: function (item, node, evt) {
					switch (this.type){
						case 'extra':
							//item.uid = item.uid;
							break;
						default:
							item.uid = '';
					}
                    item.type = this.type;
					this.appWidget.openTabGrid(item);
				},
				getIconClass: function(item, opened){return '';},
				appWidget: this,
				type: type
			}));
		},

        createForm: function(params){
            if (!!params.selRows && !!params.selRows[0]){
                if(params.selRows[0].canBeParent && params.canCreateChild){
                    //create child
                    var thisContext = this;
                    if (params.selRows[0].skipDialog){
                        this.openTabForm(true, {type: {0: params.type}, name: {0: params.title}, editMode: true, parent: params.selRows[0]});
                    }else{
                        var dialog = thisContext.getConfirmDialog(null,
                            "Создать дочерним?",
                            {ok: function(){
                                thisContext.appWidget.openTabForm(true, {type: {0: params.type}, name: {0: params.title}, editMode: true, parent: params.selRows[0]});
                            },
                            cancel: function(){
                                if (thisContext.openOnCancel){
                                    thisContext.appWidget.openTabForm(true, {type: {0:params.type}, name: {0:params.title}, editMode:true});
                                }
                            }}
                        );
                        dialog.openOnCancel = params.openOnCancel;
                        dialog.show();
                    }
                }else{
                    //create parent
                    this.openTabForm(true, {type: {0:params.type}, name: {0:params.title}, editMode:true});
                }
            }else{
                //create parent
                this.openTabForm(true, {type: {0:params.type}, name: {0:params.title}, editMode:true});
            }
        },

        getPromptDialog: function(title, content){
            var dialog = new Dialog({
                title: (title || "Сообщение"),
                content: content,
                style: "width: 300px"
            });
            return dialog;
        },

        getConfirmDialog: function(title, content, callbackObject){
            var dialog = new ConfirmDialog({
                title: (title || "Сообщение"),
                content: content,
                style: "width: 300px",
                appWidget:this
            });
            dialog.set("buttonOk","Да");
            dialog.set("buttonCancel","Нет");
            if (callbackObject.ok){
                dialog.on('execute', function() {
                    callbackObject.ok();
                });
            }
            if (callbackObject.cancel){
                dialog.on('cancel', function() {
                    callbackObject.cancel();
                });
            }
            return dialog;
        },

        saveForm: function(formWidget){
            if (formWidget.validate()){
                var sendData = formWidget.getFormObject();
                var glFormWidget = formWidget;
                var thisContext = this;
                function callback(response){
                    thisContext.openTabForm(false, {
                        type: {0:response.template},
                        name: {0:response.tabTitle},
                        editMode:true,
                        reopen: glFormWidget.isNew,
                        id: {0: response.attributes.id.value},
                        tabId: glFormWidget.id
                    });
                    //Обновить все открытые представления
                    thisContext.refreshGrids();
                };
                if (formWidget.isNew){
                    new JsonRest({
                        target: "form/" + formWidget.template
                    }).put(
                        sendData,
                        {id: 0}
                    ).then(function(response){
                        if (response.errorText){
                            var dialog = thisContext.getPromptDialog(null, response.errorText);
                            dialog.show();
                            return;
                        }
                        callback(response);
                    }, function (err){
                        // Handle the error condition
                    }, function(evt){
                        // Handle a progress event from the request if the
                        // browser supports XHR2
                    });
                }else{
                    request("form/" + formWidget.template + "/" + formWidget.response.attributes.id.value, {
                        method: "post",
                        data: JSON.stringify(sendData),
                        handleAs: "json",
                        headers: { "Content-Type": "application/json; charset=uft-8" }
                    }).then(function(response){
                        if (response.errorText){
                            var dialog = thisContext.getPromptDialog(null, response.errorText);
                            dialog.show();
                            return;
                        }
                        callback(response);
                    }, function (err){

                    });
                }
            }
        },

        refreshSidebar: function(type){
            switch (type){
                case 'extra':
                    this.extraContainer.destroyDescendants()
                    this.extraContainer.addChild(this._buildSidebarTree(type));
                    break;
                default:
            }
        },

        /*
         deleteForm: function(formWidget){
         var dialog = new ConfirmDialog({
         title: "Сообщение",
         content: "Вы действительно хотите удалить элемент?",
         style: "width: 300px",
         appWidget:this
         });
         dialog.set("buttonOk","Да");
         dialog.set("buttonCancel","Нет");
         dialog.on('execute', function() {
         var thisContext = this;
         new JsonRest({
         target: "form/" + formWidget.template
         }).remove(formWidget.response.attributes.id.value).then(function(response){
         debugger;
         thisContext.appWidget.closeTab(formWidget);
         //Обновить все открытые представления
         thisContext.appWidget.refreshGrids();
         }, function (err){
         getPromptDialog.show(null, ("Ошибка удаления: " + (err.responseText || "")));
         });
         });
         dialog.on('cancel', function() {});dialog.show();
         },
         */

        containsFormTabId: function(viewItemArray){
            var tab = null;
            var thisContext = this;
            viewItemArray.some(function(item) {
                var tmpTab = thisContext._getTabById(thisContext.tabContainer.getChildren(), 'form_' + item.type[0] + '_' + item.id[0])
                if (tmpTab){
                    tab = tmpTab;
                    return;
                }
            });
            return tab;
        },

        deleteFormInView: function(selectedItems){
            var firstTab = this.containsFormTabId(selectedItems);
            if (firstTab){
                this.getPromptDialog(null, "Ошибка удаления: открыта вкладка удаляемой карточки " + firstTab.title).show();
            }else{
                var v = [];
                selectedItems.some(function(entry) {
                    v.push({template:entry.type[0], id:entry.id[0]});
                });
                var thisContext = this;
                this.getConfirmDialog(null,
                    "Вы действительно хотите удалить " + (selectedItems.length > 1 ? "выделенные карточки" : "выделенную карточку") + "?",
                    {ok: function(){
                        request("form/remove", {
                            method: "post",
                            data: JSON.stringify(v),
                            headers: { "Content-Type": "application/json; charset=uft-8" }
                        }).then(function(response){
                            thisContext.refreshGrids(); //Обновить все открытые представления
                        }, function (err){
                            thisContext.getPromptDialog.show(null, ("Ошибка удаления: " + (err.responseText || "")));
                        });
                    },
                    cancel: function(){}}
                ).show();
            }
        },

        editForm: function(formWidget){
            this.openTabForm(false, {type: {0:formWidget.template}, id: {0:formWidget.response.attributes.id.value}, name: {0:formWidget.title}, editMode: true})
        },

		closeTab: function(tab){
			var cur = tab;
			var prev = tab;
			while (cur.declaredClass != "dijit.layout.TabContainer"){
				prev = cur;
				cur = cur.getParent();
			}
			var tabContainer = cur;
			var tab = prev;
			tabContainer.removeChild(tab);
			tab.destroy();
		},

        showCustomDialog: function (url, multiple, callback, transformCallback){
            request(url, {
                handleAs: "json"
            }).then(function(response){
                var selected = undefined;
                var cp = new ContentPane({style:{overflow: "hidden"}});
                var cp1 = new ContentPane({style:{padding:"0px", border: "1px solid #759dc0"}});
                var cp2 = new ContentPane({style:{padding:"0px"}});
                var tree = new Tree({
                    model: new ForestStoreModel({
                        store: new ItemFileReadStore({data:response.data}),
                        childrenAttrs: ["children"]
                    }),
                    class:"dialogGridView",
                    showRoot:false,
                    openOnClick:true,
                    onClick: function (item, node, evt) {
                        if (multiple){
                            selected = this.selectedItems;
                        }else{
                            selected = item;
                        }
                    },
                    getIconClass: function(item, opened){return '';}
                });
                cp1.addChild(tree);
                var cpBtnOk = new ContentPane({class: "dialogBtn"});
                var btnOk = new Button({label: "ОК"});
                cpBtnOk.addChild(btnOk);
                var cpBtnCancel = new ContentPane({class: "dialogBtn"});
                var btnCancel = new Button({label: "Отмена"});
                cpBtnCancel.addChild(btnCancel);
                cp2.addChild(cpBtnOk);
                cp2.addChild(cpBtnCancel);
                cp.addChild(cp1);
                cp.addChild(cp2);
                var dialog = new Dialog({
                    style: "width: 300px; height: 490px",
                    content: cp
                });
                var thisContext = this;
                on(btnOk, "click", function(e){
                    var isValid = (multiple ? selected.length : !!selected);
                    if (!isValid){
                        thisContext.getPromptDialog(null, "Необходимо выбрать карточку").show();
                    }else{
                        dialog.destroy();
                        callback(transformCallback(selected));
                    }
                });
                on(btnCancel, "click", function(e){dialog.destroy();});
                dialog.on('cancel', function() {});
                dialog.show();

            });

        },

        runChangePasswordDialog: function (data){

            var cp = new ContentPane({style:{overflow: "hidden"}});

            var cp1 = new ContentPane({style:{padding:"0px", border: "1px solid #759dc0"}});
            var cp2 = new ContentPane({style:{padding:"0px"}});

            var field = new TextBox({
                style: {width: "99%"}
            });

            cp1.addChild(field);

            var cpBtnOk = new ContentPane({
                class: "dialogBtn"
            });

            var btnOk = new Button({
                label: "ОК"
            });

            cpBtnOk.addChild(btnOk);

            var cpBtnCancel = new ContentPane({
                class: "dialogBtn"
            });

            var btnCancel = new Button({
                label: "Отмена"
            });

            cpBtnCancel.addChild(btnCancel);

            cp2.addChild(cpBtnOk);
            cp2.addChild(cpBtnCancel);

            cp.addChild(cp1);
            cp.addChild(cp2);

            var dialog = new Dialog({
                title: "Изменение пароля",
                style: "width: 300px; height: 490px",
                content: cp
            });
            var thisContext = this;
            on(btnOk, "click", function(e){
                if (field.value.trim() === ''){
                    thisContext.getPromptDialog(null, "Необходимо ввести пароль").show();
                }else{
                    dialog.destroy();
                    var sendData = {
                        password: field.value,
                        personid: data.id
                    };
                    request("query/auth", {
                        method: ("post"),
                        data: {form: JSON.stringify(sendData)},
                        handleAs: "json"
                    }).then(function(response){
                        thisContext.getPromptDialog(null, "Пароль успешно изменён").show();
                    }, function (err){
                        thisContext.getPromptDialog(null, "Ошибка при изменении пароля: " + (err.responseText || "")).show();
                    });
                }
            });

            on(btnCancel, "click", function(e){
                dialog.destroy();
            });

            dialog.on('cancel', function() {

            });

            dialog.show();
        },

		postCreate: function(){
			this.extraContainer.addChild(this._buildSidebarTree('extra'));
            this.logout.href = this.logout.baseURI + "/logout";
            var personId = cookie('personid');
            var thisContext = this;
            request('form/currentUser', {
                method: "get",
                handleAs: "json"
            }).then(function(response){
                thisContext.username.innerText = response.tabTitle;
                on(thisContext.username, "click", function(e){
                    e.preventDefault();
                    thisContext.openTabForm(false, {
                        type: {0: response.template},
                        name: {0: response.tabTitle},
                        editMode:false,
                        id: {0: response.attributes.id.value}
                    });
                });

            });

			this.inherited(arguments);
		}
	});
});