package com.dls.base.controller;

import com.dls.base.entity.Person;
import com.dls.base.entity.Role;
import com.dls.base.repository.PersonRepository;
import com.dls.base.repository.RoleRepository;
import com.dls.base.service.SecurityService;
import com.dls.base.validator.PersonValidator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.annotation.PostConstruct;
import java.util.HashSet;
import java.util.Set;

@Controller
public class MainController
{

	private final PersonRepository personRepository;
	private final RoleRepository roleRepository;
	private final SecurityService securityService;
	private final PersonValidator personValidator;

	@Autowired
	MainController(PersonRepository personRepository, RoleRepository roleRepository, SecurityService securityService, PersonValidator personValidator) {
		this.personRepository = personRepository;
		this.roleRepository = roleRepository;
		this.securityService = securityService;
		this.personValidator = personValidator;
	}

	@RequestMapping(value = "/login", method = RequestMethod.POST)
	public String login(@ModelAttribute("personForm") Person personForm, BindingResult bindingResult, Model model) {
		personValidator.validate(personForm, bindingResult);

		if (bindingResult.hasErrors()) {
			return "login";
		}
		securityService.autoLogin(personForm.getUsername(), personForm.getConfirmPassword());
		return "redirect:/dls";
	}

	@RequestMapping(value = {"/","/login"}, method = RequestMethod.GET)
	public String login()
	{
		return "login";
	}

	@RequestMapping(value = "/logout", method = RequestMethod.GET)
	public String logout()
	{
		return "redirect:/login";
	}

	@RequestMapping(value = "/dls/logout", method = RequestMethod.GET)
	public String logout1()
	{
		return "redirect:/logout";
	}

	@RequestMapping(value = "/dls", method = RequestMethod.GET)
	public String main()
	{
		return "dls";
	}

	//Применять ли содержимое конфиг-файла
	@Value("#{appProperties['properties.read']}")
	private boolean propertiesRead;

	//Карточка Администратора
	@Value("#{appProperties['admin.username']}")
	private String adminUsername;
	@Value("#{appProperties['admin.password']}")
	private String adminPassword;
	@Value("#{appProperties['admin.email']}")
	private String adminEmail;
	@Value("#{appProperties['admin.surname']}")
	private String adminSurname;
	@Value("#{appProperties['admin.name']}")
	private String adminName;
	@Value("#{appProperties['admin.middlename']}")
	private String adminMiddlename;

	//Роли
	@Value("#{appProperties['roles.admin.name']}")
	private String rolesAdminName;

	@Value("#{appProperties['roles.admin.code']}")
	private String rolesAdminCode;

	@Value("#{appProperties['roles.admin_of_educational_process.name']}")
	private String rolesAdminOfEducationalProcessName;

	@Value("#{appProperties['roles.admin_of_educational_process.code']}")
	private String rolesAdminOfEducationalProcessCode;

	@Value("#{appProperties['roles.curator.name']}")
	private String rolesCuratorName;

	@Value("#{appProperties['roles.curator.code']}")
	private String rolesCuratorCode;

	@Value("#{appProperties['roles.student.name']}")
	private String rolesStudentName;

	@Value("#{appProperties['roles.student.code']}")
	private String rolesStudentCode;

	@PostConstruct
	public void postConstruct() {
		if (propertiesRead) {
			Role role;
			Person person;
			//Создаём роли, если их нет
			if (this.roleRepository.findAll().size() == 0){

				role = new Role();
				role.setName(rolesAdminName);
				role.setCode(rolesAdminCode);
				this.roleRepository.save(role);

				role = new Role();
				role.setName(rolesAdminOfEducationalProcessName);
				role.setCode(rolesAdminOfEducationalProcessCode);
				this.roleRepository.save(role);

				role = new Role();
				role.setName(rolesCuratorName);
				role.setCode(rolesCuratorCode);
				this.roleRepository.save(role);

				role = new Role();
				role.setName(rolesStudentName);
				role.setCode(rolesStudentCode);
				this.roleRepository.save(role);

			}
			//Создаём администратора, если отсутствует
			if (this.personRepository.findByRoleCode(rolesAdminCode).size() == 0){
				person = new Person();
				person.setUsername(adminUsername);
				person.setPassword(new BCryptPasswordEncoder().encode(adminPassword));
				person.setEmail(adminEmail);
				person.setSurname(adminSurname);
				person.setName(adminName);
				person.setMiddlename(adminMiddlename);
				person = this.personRepository.save(person);

				//Добавляем роль администратору
				role = this.roleRepository.findByRoleCode(rolesAdminCode);
				Set<Role> adminRoles = new HashSet<>();
				adminRoles.add(role);
				person.setRoles(adminRoles);
				this.personRepository.save(person);

			}

		}
	}

}